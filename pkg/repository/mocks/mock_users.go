// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/users.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	repository "finance-tg-bot/pkg/repository"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserProvider is a mock of UserProvider interface.
type MockUserProvider struct {
	ctrl     *gomock.Controller
	recorder *MockUserProviderMockRecorder
}

// MockUserProviderMockRecorder is the mock recorder for MockUserProvider.
type MockUserProviderMockRecorder struct {
	mock *MockUserProvider
}

// NewMockUserProvider creates a new mock instance.
func NewMockUserProvider(ctrl *gomock.Controller) *MockUserProvider {
	mock := &MockUserProvider{ctrl: ctrl}
	mock.recorder = &MockUserProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserProvider) EXPECT() *MockUserProviderMockRecorder {
	return m.recorder
}

// GetUserInfo mocks base method.
func (m *MockUserProvider) GetUserInfo(ctx context.Context, username string) (*repository.DBClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", ctx, username)
	ret0, _ := ret[0].(*repository.DBClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockUserProviderMockRecorder) GetUserInfo(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockUserProvider)(nil).GetUserInfo), ctx, username)
}
